
 Student-Centric Digital Life System

Tasks: 

 Module                          
  **Career Guidance** =          AI Chatbot , Choose Interests, View Career Paths, Internship Feeds 
  **Personal Task Manager** =     Create/Edit/Delete tasks, Set deadlines, Mark as complete, Reminder system                  
  **Campus Complaint Box**  =    File complaints anonymously.                   
  **Gamification**, **Leaderboard**  =              Attend events or contests, Information about every events and clubs.           
                                    
  **Baby Care Module (Demo)** =  Store baby's health/vaccine data for married students or show demo DB entry usage           


  Technologies:

Frontend: JavaFX for modern UI (glass effect, hover animations, buttons, etc.)
Backend: Java + JDBC
Database: MySQL or xamp
more features :  AI Integration.
optionla : Admin dashboard, Email notifier


UI Flow: login pge --> homepage --> other modules on other screen 


Final DS Planning Table for Your Project: 

|    Data Structure       |   Type / Concept              |    Use in Which Module                                |    Purpose / Logic                                  |
| ----------------------- | ----------------------------- | ----------------------------------------------------- | --------------------------------------------------- |
| **LinkedList**          | Singly LinkedList             | **Task Manager**                                      | Manage dynamic tasks list, reorder easily           |
| **Doubly LinkedList**   | Doubly                        | **Complaint Tracking System**                         | Navigate forward/backward through complaint history |
| **Circular LinkedList** | Circular                      | **Gamification Events**                               | Loop through event list for repeated schedule       |
| **Queue**               | FIFO                          | **Task Notification / Reminder Queue**                | Notify tasks in order of deadlines                  |
| **Stack**               | LIFO                          | **Undo Actions in Task Manager / Navigation History** | Allow undo last edit/delete                         |
| **Priority Queue**      | Max-Heap                      | **Leaderboard Module**                                | Rank students by points or badges                   |
| **HashMap / HashSet**   | Key-Value                     | **Career Guidance / Event Join Map**                  | Map interests to career options, fast lookup        |
| **Graph**               | Adjacency List / Matrix       | **Career Path Mapping**                               | Display paths from interest to advanced roles       |
| **Search Algorithm**    | Binary Search / Linear        | **Search Task / Event / Career by name or ID**        | Quick searching operations in any module            |
| **Sorting Algorithm**   | Custom Comparator / MergeSort | **Leaderboard, Task Due Sort, Career Relevance**      | Sort tasks/events by date, relevance, score         |



   overall : 
| Module           | DS Feature To Add                               |
| ---------------- | ----------------------------------------------- |
| Task Manager     | LinkedList, Stack, Queue, Search                |
| Complaint Box    | Doubly LinkedList                               |
| Career Guidance  | Graph (career path), HashMap (interest mapping) |
| Gamification     | Circular LinkedList (event repeat), HashSet     |
| Leaderboard      | PriorityQueue + Sorting                         |
| Baby Care Module | Search + simple DB interaction                  |





## ‚úÖ Finalized Login Flow (Current Plan)

### üéØ Purpose:

* Let **students** and **faculties** both log in
* For now, **same homepage for both**
* Later we can expand to different dashboards, but not now



## üß† Updated Logic (Simplified):

1. User enters `username + password`
2. We check in **MySQL database**
3. ‚úÖ If valid ‚Üí Directly redirect to the **common Home Page**
4. ‚ùå If invalid ‚Üí Show error message

### ‚ö†Ô∏è Role is still stored in DB (for future), but **not used** for redirection right now.

---

## üíæ Final Database Table
_______________________________________________________________________
```sql
CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(50),
  password VARCHAR(50),
  role ENUM('student', 'faculty') -- stored but unused
);
_______________________________________________________________________```

| id | username | password | role    |
| -- | -------- | -------- | ------- |
| 1  | yuvraj   | 1234     | student |
| 2  | anjali   | abcd     | faculty |

---

## üß± Login UI Inputs:

* üîπ Username (TextField)
* üîπ Password (PasswordField)
* üîπ Login Button

We will **not show role selector** since it's not required now.

---

## üñ•Ô∏è UI Design (JavaFX):

* Central layout
* Wine/dark pink background
* White input fields + shadowed Login button
* Glassy, rounded corners with hover effects

---

## üîå Final Login Logic (JDBC)

```java
PreparedStatement ps = con.prepareStatement(
    "SELECT * FROM users WHERE username=? AND password=?"
);
```

* If `rs.next()` ‚Üí success ‚Üí open common `HomePage.java`
* Else ‚Üí error alert in red text



## ‚úÖ Summary of Your Current Login Page:

_________________________________________________________
| Feature              |  Status                        |
| -------------------- |  ----------------------------- |
| DB-based login       | ‚úÖ Yes                         |
| Role-based access    | ‚ùå Not needed now (but stored) |
| UI design            | ‚úÖ Stylish JavaFX              |
| Redirect to HomePage | ‚úÖ Common for both             |
_________________________________________________________





